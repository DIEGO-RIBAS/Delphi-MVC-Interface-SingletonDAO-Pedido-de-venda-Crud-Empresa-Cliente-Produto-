unit uCliente.Model;

interface
  uses
    System.SysUtils,
    FireDAC.Comp.Client,
    uCliente.Implements;

  type

  TClienteModel = class(TInterfacedObject, iCliente)
    private
      FQuery : TFDQuery;

      FId : Integer;
      FNome : string;
      Fcidade : string;
      Fuf : string;

      function id(AValue : integer):iCliente;
      function Nome(AVAlue : string):iCliente;
      function cidade(AValue : string): iCliente;
      function uf(AValue : string): iCliente;

      function Gravar : Boolean;
      function Listar(AMemTable : TFDMemTable):Boolean;
      function Deletar : Boolean;
    public

      class function New : iCliente;

      constructor create;
      destructor destroy;override;
  end;

implementation

  uses
    uDao.ConexaoSingleton;

{ TClienteModel }

function TClienteModel.cidade(AValue: string): iCliente;
begin
  Fcidade := AValue;
  Result := Self;
end;

constructor TClienteModel.create;
begin
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection :=   TConexaoSingleton.GetInstance.Conexao;
end;

function TClienteModel.Deletar: Boolean;
begin

end;

destructor TClienteModel.destroy;
begin
  FreeAndNil(FQuery);
  inherited;
end;

function TClienteModel.Gravar: Boolean;
begin
  with FQuery do
  begin
    Close;

    with SQL do
    begin
      Clear;
    end;
  end;
end;

function TClienteModel.id(AValue: integer): iCliente;
begin
  FId := AValue;
  Result := Self;
end;

function TClienteModel.Listar(AMemTable: TFDMemTable): Boolean;
begin
  with FQuery do
  begin
    Close;

    with SQL do
    begin
      Clear;

      Add('Select *from cliente');
    end;

    try
      Open;
    except on E: Exception do
      raise Exception.Create('Erro na consulta '+ E.Message);
    end;


  end;

end;

class function TClienteModel.New: iCliente;
begin

end;

function TClienteModel.Nome(AVAlue: string): iCliente;
begin

end;

function TClienteModel.uf(AValue: string): iCliente;
begin

end;

end.
